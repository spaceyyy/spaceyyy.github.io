/* notetoself.js */

localStorage.setItem("sticky_0", "Pick up dry cleaning");
localStorage.setItem("sticky_1", "Cancel cable tv, who needs it now?");

window.onload = init;   // when the page is loaded we're going to call the init function ... which reads all the existing
                        // stickies from localStorage and adds them
function init() {       // to the <ul> through the DOM  (part 1/ 2)
  var button = document.getElementById("add_button");  // Let's grab a reference to the "Add Sticky Note to Self" button
  button.onclick = createSticky;  // And add a handler for when it is clicked. Let's call the handler createSticky

  var stickiesArray = getStickiesArray();    // Grabbing the array with the stickies' keys in it

  for (var i = 0; i < stickiesArray.length; i++) {  // (part 2/2) to do that we iterate through the stickies array (not the localStorage items!)
    var key = stickiesArray[i];    // Each item in the array is key to a sticky. Let's grab each one
      var value = JSON.parse(localStorage[key]);    // Now when we get the value of the sticky note from localStorage, we need to JSON.parse it, b/c it's an object not a string anymore
      addStickyToDOM(key, value);  // And add it to the DOM.
    }
  }

  // We're being passed the text of the sticky note. We need to create a list item for the
function addStickyToDOM(key, stickyObj) {  // unordered list and then insert it.
  var stickies = document.getElementById("stickies");  // So, let's get the "stickies" list element
  var sticky = document.createElement("li");  // Create a list element, and give it a class name
  sticky.setAttribute("id", key);    // adding unique id to the <li> element that represents the sticky in the DOM. This allows deleteSticky to know which sticky you clicked on

  sticky.style.backgroundColor = stickyObj.color;  // color from the stickyObj we're passing into addStickyToDOM

  var span = document.createElement("span");  // of "sticky"
  span.setAttribute("class", "sticky");  // (so we can style it)
  span.innerHTML = stickyObj.value;  // Set the content of the span holding the text of the sticky note
  sticky.appendChild(span);  // And add the span to the "sticky" <li>, and
  stickies.appendChild(sticky);  // the <li> to the "stickies" list
  sticky.onclick = deleteSticky;    // adding click handler to every sticky. When you click on a sticky, deleteSticky will be called.
}


function createSticky() {  // when the button is clicked, this handler is invoked
  var stickiesArray = getStickiesArray();    // grabbing the stickies array
  var currentDate = new Date();    // creating the unique
  var colorSelectObj = document.getElementById("note_color");
  var index = colorSelectObj.selectedIndex;
  var color = colorSelectObj[index].value;  // grabbing value of the selected color option
  var key = "sticky_" + currentDate.getTime();    // for our new sticky.
  var value = document.getElementById("note_text").value;    // We add sticky key/value
  var stickyObj = {
    "value": value,
    "color": color
  };
  localStorage.setItem(key, JSON.stringify(stickyObj));  // JSON.stringify the stickyObj before we put it in localStorage
  localStorage.setItem(key, value);    // to localStorage
  stickiesArray.push(key);    // And add the new key to the stickies array...
  localStorage.setItem("stickiesArray", JSON.stringify(stickiesArray));    // And then we stringify the array and write back to localStorage
  addStickyToDOM(key, stickyObj);    // adding the sticky to DOM
}


function getStickiesArray() {
  var stickiesArray = localStorage.getItem("stickiesArray");    // First we get the item "stickiesArray" out of localStorage.
  if (!stickiesArray) {    // If this is the first time we've loaded this app, there might not be a "stickiesArray" item.
    stickiesArray = [];    // And if there isn't an array yet we create an empty array, and then store it back in localStorage
    localStorage.setItem("stickiesArray", JSON.stringify(stickiesArray));
  } else {
    stickiesArray = JSON.parse(stickiesArray)    // Otherwise, we found the array in localStorage, and we need to parse it
  }                                              // to convert it to a JavaScript array
  return stickiesArray;    // In either case, we end up with an array, and we return it
}


function deleteSticky(e) {    // the event generated by your click gets passed into deleteSticky.
  var key = e.target.id;    // the target is the element you clicked on that generated  the event, we get the id of that element from the target property.
  if (e.target.tagName.toLowerCase() == "span") {    // If the target is the <span>, then we need to get the id of the parent element , the <li>. The <li>
    key = e.target.parentNode.id;                   // <li> is the element with the id that is the key we need
  }
  localStorage.removeItem(key);    // removing the sticky note from localStorage using removeItem, passing in the key of the sticky to delete
  var stickiesArray = getStickiesArray();    // using the getStickiesArray function to get the stickiesArray from localStorage
  if (stickiesArray) {    // verifying if we have a stickiesArray
    for (var i = 0; i < stickiesArray.length; i++) {    // iterating through the array looking for the key we want to delete
      if (key == stickiesArray[i]) {    // when we find the right key, we delete it from the array using splice
        stickiesArray.splice(i, 1);    // splice removes elements from an array starting at the location given by the first argument (i), for as
      }                                // for as many elements as are specified in the second argument (1).
    }
    localStorage.setItem("stickiesArray", JSON.stringify(stickiesArray));  // Finally, we save the stickiesArray (w/ the key removed) bk to localStorage
    removeStickyFromDOM(key);    // removing the <li> holding the sticky from the page, so it disappears when you click it.
  }
}


function removeStickyFromDOM(key) {    // pass in the key (also the id) of the sticky element we're looking for
  var sticky = document.getElementById(key);  // grabbing <li> element from the DOM
  sticky.parentNode.removeChild(sticky);    // and remove it by first getting its parentNode and then using removeChild to remove it
}


// horrible notes, do not do this again. Look at the sample files in the .zip file to see how comments
// are used. The code itself should be understandable with the comments above function explaining it instead
// of a comment next to each line of code
